import Rectangle from "../components/Rectangle/Rectangle";
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import prisma from '../lib/prisma';
import { GetStaticProps } from 'next';

export default function Home({ coins, totalProofOfWorkMarketCap }) {
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Rectangle coins={coins} />
        <p>Total: ${totalProofOfWorkMarketCap.toLocaleString()}</p>
        <table>
          <tbody>
            {coins.map((coin) => (
              <tr key={coin.id}>
                <td>{coin.name}</td>
                <td>${formatMarketCap(coin.marketCap)}</td>
                <td>{Math.round(coin.marketCap / totalProofOfWorkMarketCap * 100 * 100) / 100}%</td>
              </tr>
            ))}
          </tbody>
        </table>
        {/* <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">Next.js!</a>
        </h1>

        <p className={styles.description}>
          Get started by editing{' '}
          <code className={styles.code}>pages/index.js</code>
        </p>

        <div className={styles.grid}>
          <a href="https://nextjs.org/docs" className={styles.card}>
            <h2>Documentation &rarr;</h2>
            <p>Find in-depth information about Next.js features and API.</p>
          </a>

          <a href="https://nextjs.org/learn" className={styles.card}>
            <h2>Learn &rarr;</h2>
            <p>Learn about Next.js in an interactive course with quizzes!</p>
          </a>

          <a
            href="https://github.com/vercel/next.js/tree/canary/examples"
            className={styles.card}
          >
            <h2>Examples &rarr;</h2>
            <p>Discover and deploy boilerplate example Next.js projects.</p>
          </a>

          <a
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
          >
            <h2>Deploy &rarr;</h2>
            <p>
              Instantly deploy your Next.js site to a public URL with Vercel.
            </p>
          </a>
        </div> */}
      </main>

      {/* <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer> */}
    </div>
  )
}

export const getStaticProps = async () => {
  const coins = await prisma.coin.findMany({
    where: { 
      isPoW: true,
      marketCap: {
        gt: 0
      }
    },
    orderBy: {
      marketCap: 'desc'
    }
  });
  var cleanedCoins = coins.map((coin) => ({
    ...coin,
    marketCap: coin.marketCap.toNumber(),
    price: coin.price.toNumber(),
    // ...
  }));
  var otherCoins = cleanedCoins.slice(10);
  cleanedCoins = cleanedCoins.slice(0, 10);
  var otherCoin = {
    id: 0,
    name: "Other",
    symbol: "",
    marketCap: otherCoins.reduce((prev, current) => { return prev + current.marketCap; }, 0),
    price: 0,
    isPoW: true
  };
  cleanedCoins.push(otherCoin);
  var totalProofOfWorkMarketCap = cleanedCoins.reduce((prev, current) => {
    return prev + current.marketCap;
  }, 0);

  return {
    props: { 
      coins: cleanedCoins,
      totalProofOfWorkMarketCap: totalProofOfWorkMarketCap,
    },
    revalidate: 10,
  };
};

function formatMarketCap(marketCap) {
  if (marketCap >= 1000000000000 ) { // >= 1 trillion
    return (Math.round(marketCap / 100000000000) / 10).toFixed(1) + "T";
  } else if (marketCap >= 1000000000 ) { // >= 1 billion
    return (Math.round(marketCap / 100000000) / 10).toFixed(1) + "B";
  } else if (marketCap >= 1000000 ) { // >= 1 million
    return (Math.round(marketCap / 100000) / 10).toFixed(1) + "M";
  } else {
    return marketCap.toLocaleString();
  }
}